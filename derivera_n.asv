function dy = derivera_n(f, a, b, n, varargin)
% Beräknar derivatorna numeriskt
% IN
% f symbolisk funktion i en variabel
% a start för beräkningsintervallet
% b slut för beräkningsintervallet
% n antalet punkter i intervallet
% varargin lägesväljare mellan matlabfunc och symbolisk med vpa
% UT
% dy vektor med de numreriskt beräknade derivatorna
    if nargin == 0
        f = matlabFunction(f);
    end
    intervall = linspace(a,b,n);	% formaterar intervallet
    start_steg = 1/(2^10);          % sätter ett lämpligt startsteg
    numeriskt = @numeriskt_exp4;    % väljer numerisk funktion
    % Beräknar en lämplig steglängd
    %prel_berr = numeriskt(f, intervall, start_steg);
    nytt_steg = start_steg./bis(f, intervall, start_steg);  %justerar steglängd beroende på 2:a derivatan
    ny_berr = numeriskt(f, intervall, nytt_steg);
    if nargin == 0
        dy = double(ny_berr);
    else
        dy = vpa(ny_berr);
    end
end

function ddy=bis(f, a, h)
    % Beräknar andraderivata
    andra = (f(a+h)-2*f(a)+f(a-h))./(h.^2);
    if double(andra)
        ddy=andra;
    else
        ddy=0.00000000001;
    end
end

%RichardsonextrMAGI be here
function dy=numeriskt_exp(f, a, h)
    dy = (2*f(a+2*h)-2*f(a-2*h)-f(a+h)+f(a-h))./(2*h*(4-1));
end

function dy=numeriskt_exp2(f, a, h)
    dy=(4*numeriskt_exp(f, a, h/2)-numeriskt_exp(f, a, h))/(4-1);
end

function dy=numeriskt_exp3(f, a, h)
    dy=(16*numeriskt_exp2(f, a, h/2)-numeriskt_exp2(f, a, h))/(16-1);
end

function dy=numeriskt_exp4(f, a, h)
    dy=(64*numeriskt_exp3(f, a, h/2)-numeriskt_exp3(f, a, h))/(64-1);
end








